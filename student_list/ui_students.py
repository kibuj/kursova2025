import tkinter as tk
from tkinter import messagebox, Scrollbar
from db import conn, cursor
from human import Student, humans

def setup_student_ui(frame_students):
    tk.Label(frame_students, text="üéì –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏", font=("Helvetica", 14, "bold")).pack(pady=5)

    add_frame = tk.LabelFrame(frame_students, text="‚ûï –î–æ–¥–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞", padx=10, pady=10, bg="#f0f8ff")
    add_frame.pack(fill="x", padx=5, pady=5)

    global entry_s_name, entry_s_surname, entry_s_group
    entry_s_name = tk.Entry(add_frame, width=40)
    entry_s_surname = tk.Entry(add_frame, width=40)
    entry_s_group = tk.Entry(add_frame, width=40)

    for label, entry in [("–Ü–º'—è", entry_s_name), ("–ü—Ä—ñ–∑–≤–∏—â–µ", entry_s_surname), ("–ì—Ä—É–ø–∞", entry_s_group)]:
        tk.Label(add_frame, text=label, bg="#f0f8ff").pack(anchor="w")
        entry.pack()

    def add_student():
        name = entry_s_name.get().strip()
        surname = entry_s_surname.get().strip()
        group = entry_s_group.get().strip()

        if not name or not surname or not group:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞.")
            return

        student = Student(name, surname, group)
        humans[student.id] = student.to_dict()
        student.save_to_db(conn)

        output_students.insert(tk.END, f"‚úÖ –î–æ–¥–∞–Ω–æ:\n{student.show_info()}\n\n")

        entry_s_name.delete(0, tk.END)
        entry_s_surname.delete(0, tk.END)
        entry_s_group.delete(0, tk.END)

    tk.Button(add_frame, text="–î–æ–¥–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞", command=add_student, bg="#d0f0c0").pack(pady=5)

    output_frame = tk.LabelFrame(frame_students, text="üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", padx=10, pady=10)
    output_frame.pack(fill="both", expand=True, padx=5, pady=5)

    global output_students
    scroll = Scrollbar(output_frame)
    scroll.pack(side="right", fill="y")

    output_students = tk.Text(output_frame, height=12, width=70, yscrollcommand=scroll.set)
    output_students.pack(side="left", fill="both", expand=True)
    scroll.config(command=output_students.yview)

    def show_all_students():
        cursor.execute("SELECT id, name, surname, group_name, courses, grades, average FROM students")
        rows = cursor.fetchall()
        output_students.delete("1.0", tk.END)
        if not rows:
            output_students.insert(tk.END, "‚ùå –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.\n")
        else:
            for row in rows:
                sid, name, surname, group, courses, grades, average = row
                info = (f"üÜî ID: {sid}\nüë§ {surname} {name}\nüè´ –ì—Ä—É–ø–∞: {group}\nüìò –ö—É—Ä—Å–∏: {courses}\n"
                        f"üìä –û—Ü—ñ–Ω–∫–∏: {grades}\nüìà –°–µ—Ä–µ–¥–Ω—è: {average:.2f}\n\n")
                output_students.insert(tk.END, info)

    tk.Button(frame_students, text="üìÇ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤", command=show_all_students, bg="#e6e6fa").pack(pady=5)

    update_frame = tk.LabelFrame(frame_students, text="üõ† –û–Ω–æ–≤–∏—Ç–∏ / –í–∏–¥–∞–ª–∏—Ç–∏", padx=10, pady=10, bg="#f9f9f9")
    update_frame.pack(fill="x", padx=5, pady=5)

    global entry_update_id, entry_new_course, entry_new_grade, entry_new_group
    entry_update_id = tk.Entry(update_frame, width=40)
    entry_new_course = tk.Entry(update_frame, width=40)
    entry_new_grade = tk.Entry(update_frame, width=40)
    entry_new_group = tk.Entry(update_frame, width=40)

    for label, entry in [
        ("ID —Å—Ç—É–¥–µ–Ω—Ç–∞", entry_update_id),
        ("–ù–æ–≤–∏–π –∫—É—Ä—Å", entry_new_course),
        ("–ù–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞", entry_new_grade)
    ]:
        tk.Label(update_frame, text=label, bg="#f9f9f9").pack(anchor="w")
        entry.pack()

    def update_student():
        try:
            student_id = int(entry_update_id.get())
        except ValueError:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
            return

        cursor.execute("SELECT name, surname, group_name, courses, grades FROM students WHERE id = ?", (student_id,))
        result = cursor.fetchone()

        if not result:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–°—Ç—É–¥–µ–Ω—Ç–∞ –∑ ID {student_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        name, surname, group, courses_str, grades_str = result

        student = Student(name, surname, group)
        student.id = student_id
        student.courses = courses_str.split(",") if courses_str else []
        student.grades = list(map(int, grades_str.split(","))) if grades_str else []

        new_course = entry_new_course.get().strip()
        if new_course:
            student.add_course(new_course)

        new_grade = entry_new_grade.get().strip()
        if new_grade:
            try:
                student.add_grade(int(new_grade))
            except ValueError:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û—Ü—ñ–Ω–∫–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")

        new_group = entry_new_group.get().strip()
        if new_group:
            student.group = new_group

        humans[student.id] = student.to_dict()
        student.save_to_db(conn)

        output_students.insert(tk.END, f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ:\n{student.show_info()}\n\n")

        entry_update_id.delete(0, tk.END)
        entry_new_course.delete(0, tk.END)
        entry_new_grade.delete(0, tk.END)
        entry_new_group.delete(0, tk.END)

    def delete_student():
        try:
            sid = int(entry_update_id.get())
        except ValueError:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
            return

        cursor.execute("SELECT id FROM students WHERE id = ?", (sid,))
        if not cursor.fetchone():
            messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", f"–°—Ç—É–¥–µ–Ω—Ç–∞ –∑ ID {sid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        cursor.execute("DELETE FROM students WHERE id = ?", (sid,))
        conn.commit()
        output_students.insert(tk.END, f"üóë –°—Ç—É–¥–µ–Ω—Ç –∑ ID {sid} –≤–∏–¥–∞–ª–µ–Ω–∏–π.\n")

        entry_update_id.delete(0, tk.END)
        entry_new_course.delete(0, tk.END)
        entry_new_grade.delete(0, tk.END)
        entry_new_group.delete(0, tk.END)

    tk.Button(update_frame, text="–û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ", command=update_student, bg="#add8e6").pack(pady=2)
    tk.Button(update_frame, text="–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞", command=delete_student, bg="#ff9999").pack(pady=2)
